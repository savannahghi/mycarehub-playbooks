---

- name: Ensure required variables have been set
  ansible.builtin.fail:
    msg: "'{{ item.name }}' is not defined"
  loop:
    - { name: idr_client_server_password, value: "{{ idr_client_server_password }}"}
    - { name: idr_client_server_url, value: "{{ idr_client_server_url }}" }
    - { name: idr_client_server_username, value: "{{ idr_client_server_username }}" }
    - { name: idr_client_host_mysql_password, value: "{{ idr_client_host_mysql_password }}" }
    - { name: idr_client_location_code, value: "{{ idr_client_location_code }}" }
    - { name: idr_client_location_name, value: "{{ idr_client_location_name }}" }
  tags: ["idr_client"]
  when: not item.value

- name: Prepare the Host for IDR Client installation
  block:
    - name: Install application dependencies
      ansible.builtin.apt:
        name:
          - cron
        state: present
        update_cache: yes

    - name: Add application user group
      ansible.builtin.group:
        name: "{{ idr_client_user_group }}"
        state: present
        system: yes

    - name: Add application user
      ansible.builtin.user:
        comment: Custom user for running idr related tasks.
        group: "{{ idr_client_user_group }}"
        name: "{{ idr_client_user }}"
        shell: /bin/bash
        state: present
        system: yes

    - name: Create essential directories for the application
      ansible.builtin.file:
        group: "{{ idr_client_user_group }}"
        mode: "{{ item.mode }}" 
        owner: root
        path: "{{ item.dir }}" 
        state: directory
      loop:
        - { dir: "{{ idr_client_config_dir }}", mode: "ug=rwx,o=rx,g+s" }
        - { dir: "{{ idr_client_logs_dir }}", mode: "a=rwx,g+s" }  # Make the logs directory world writable allowing any user to run the application
  become: yes
  tags: ["idr_client"]

- name: Check for new application versions
  block:
    - name: Get latest application version data
      ansible.builtin.uri:
        follow_redirects: safe
        force: yes
        headers:
          Accept: application/json
        method: GET
        return_content: yes
        status_code: 200
        url: "{{ idr_client_download_url }}"
      register: app_version_data_response
      retries: 5
      until: app_version_data_response.status == 200

    - name: Get installed application version
      ansible.builtin.slurp:
        src: "{{ idr_client_config_dir }}/app_version_data.json"
      become: yes
      ignore_errors: yes
      register: installed_app_version_content

    - name: Establish app version facts
      ansible.builtin.set_fact:
        cacheable: no
        current_installed_app_version: "{{ 'NONE' if installed_app_version_content is failed else (installed_app_version_content.content | b64decode | from_json)['tag_name'] }}"
        latest_available_app_version: "{{ app_version_data_response.json['tag_name'] }}"
        new_version_download_url: "{{ app_version_data_response.json.assets[0].browser_download_url }}"

    - name: Determine if a new application version is available
      ansible.builtin.set_fact:
        cacheable: no
        new_version_available: "{{ current_installed_app_version != latest_available_app_version }}"

    - name: Show version info
      ansible.builtin.debug:
        msg: The current installed version is '{{ current_installed_app_version }}', latest available version is '{{ latest_available_app_version }}
  tags: ["idr_client"]
  
- name: Install application
  block:
    - name: Download latest application version
      ansible.builtin.get_url:
        dest: "{{ idr_client_installation_dir }}/idr_client"
        force: yes
        group: "{{ idr_client_user_group }}"
        owner: root
        mode: "a=rx"
        url: "{{ new_version_download_url }}"

    - name: Copy script for running the client to the installation directory
      ansible.builtin.template:
        dest: "{{ idr_client_installation_dir }}/run_idr_client"
        force: yes
        group: "{{ idr_client_user_group }}"
        owner: root
        mode: "ug=rwx,o=rx"
        src: run_idr_client.sh

    - name: Copy the application configuration file to the appropriate directory
      ansible.builtin.template:
        backup: yes
        dest: "{{ idr_client_config_dir }}/config.yml"
        force: yes
        group: "{{ idr_client_user_group }}"
        owner: root
        mode: "ug=rw,o=r"
        src: config.yml

    - name: Remove existing cron entries for running the client
      ansible.builtin.cron:
        name: "{{ item }}"
        state: absent
        user: "{{ idr_client_user }}"
      loop:
        - run_idr_client
        - run auto extraction
    
    - name: Create a MySQL DB user to execute SQL queries
      become: yes
      community.mysql.mysql_user:
        login_unix_socket: "{{ idr_client_host_mysql_host_unix_socket_path }}"
        name: "{{ idr_client_host_mysql_user }}"
        password: "{{ idr_client_host_mysql_password }}"
        priv: "{{ idr_client_host_mysql_user_privileges }}"
        state: present

    - name: Create an hourly cron entry to run the client periodically
      ansible.builtin.cron:
        hour: "{{ idr_client_hourly_cron_schedule }}"
        job: "{{ idr_client_installation_dir }}/run_idr_client"
        minute: "0"
        name: run_idr_client
        state: present
        user: "{{ idr_client_user }}"

    - name: Save downloaded app version data
      ansible.builtin.copy:
        backup: no
        content: "{{ app_version_data_response.json|to_nice_json }}"
        dest: "{{ idr_client_config_dir }}/app_version_data.json"
        force: yes
        group: "{{ idr_client_user_group }}"
        mode: "ug=rw,o=r"
        owner: root
  become: yes
  tags: ["idr_client"]
  when: idr_client_force_app_download or new_version_available

- name: Add desktop entries.
  block:
    - name: Install desktop file utils
      ansible.builtin.apt:
        name:
          - desktop-file-utils
        state: present
        update_cache: no
  
    - name: Add a desktop entry for the application.
      ansible.builtin.template:
        dest: "{{ idr_client_desktop_entry_installation_dir }}/idr-client.desktop"
        force: yes
        group: root
        mode: "u=rw,go=r"
        owner: root
        src: idr-client.desktop

    - name: Add an icon for the application.
      ansible.builtin.copy:
        dest: "{{ idr_client_icon_installation_dir }}/idr_logo.png"
        force: yes
        group: root
        mode: "u=rw,go=r"
        owner: root
        src: idr_logo.png

    - name: Update desktop entries database.
      ansible.builtin.shell:
        cmd: "update-desktop-database {{ idr_client_desktop_entry_installation_dir }}"
  become: yes
  tags: ["idr_client"]
  when: idr_client_do_add_desktop_entries and (idr_client_force_app_download or new_version_available)
