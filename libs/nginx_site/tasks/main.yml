---

- name: Check if required vars have been defined
  ansible.builtin.fail:
    msg: "'{{ item.name }}' is not defined"
  loop:
    - { name: nginx_site_confirm_string, value: "{{ nginx_site_confirm_string }}" }
    - { name: nginx_site_filename, value: "{{ nginx_site_filename }}" }
    - { name: nginx_site_server_name, value: "{{ nginx_site_server_name }}" }
  tags: ["nginx_site"]
  when: not item.value

- name: Add site config
  ansible.builtin.template:
    dest: /etc/nginx/sites-available/{{ nginx_site_filename }}
    group: root
    mode: "u=rw,g=rw,o=r"
    owner: root
    src: nginx_site.nginx.conf
  become: true
  tags: ["nginx_site"]

- name: Enable site
  ansible.builtin.file:
    dest: /etc/nginx/sites-enabled/{{ nginx_site_filename }}
    group: root
    mode: "u=rw,g=rw,o=r"
    owner: root
    src: /etc/nginx/sites-available/{{ nginx_site_filename }}
    state: link
  become: true
  tags: ["nginx_site"]

- name: Restart Nginx
  ansible.builtin.service:
    name: nginx
    state: restarted
  become: true
  tags: ["nginx_site"]

- name: Access site
  ansible.builtin.uri:
    return_content: true
    url: "{{ nginx_site_server_url }}"
    validate_certs: "{{ nginx_site_validate_certs }}"
  delay: 5
  failed_when: nginx_site_confirm_string not in accessed_page.content
  ignore_errors: "{{ ansible_check_mode }}"
  register: accessed_page
  retries: 3
  tags: ["nginx_site"]
  until: accessed_page.status == 200
