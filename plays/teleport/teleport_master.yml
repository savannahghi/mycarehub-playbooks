---

- name: Deploy Teleport master server
  hosts: teleport_master_servers
  pre_tasks:
    - name: Create deploy user
      ansible.builtin.user: name={{ deploy_user }} groups=www-data,sudo state=present
      become: yes
  post_tasks:
    - name: Deploy successful, remove lock_file
      ansible.builtin.file: path={{ lock_file_path }} state=absent
      become: yes
  roles:
    - common
    - sudoers
    - teleport
  strategy: free
  vars:
    force_ignore_lock: "{{ force_ignore_lock }}"
    lock_file_path: /tmp/ansible-teleport-master-deploy.lock
    teleport_config_path: /etc/teleport.yaml

  tasks:
    - name: Check if required variables have been defined
      ansible.builtin.fail:
        msg: "{{ item.name }} is not defined"
      loop:
        - { name: "teleport_master_admin_email", value: "{{ teleport_master_admin_email }}" }
        - { name: "teleport_master_domain", value: "{{ teleport_master_domain }}" }
      when: not item.value
      tags: ["teleport_master"]

    - name: Remove existing Teleport configuration if present
      ansible.builtin.file:
        path: "{{ teleport_config_path }}"
        state: absent
      become: yes
      tags: ["teleport_master"]

    - name: Configure Teleport server
      ansible.builtin.shell: "teleport configure --acme --acme-email={{ teleport_master_admin_email }} --cluster-name={{ teleport_master_domain }} --output={{ teleport_config_path }}"
      become: yes
      tags: ["teleport_master"]

    - name: Enable the Teleport service
      ansible.builtin.systemd:
          name: "teleport"
          daemon_reload: yes
          enabled: yes
          state: restarted
      become: yes
      tags: ["teleport_master"]

    - name: Verify Teleport service is up
      ansible.builtin.uri:
        url: "https://{{ teleport_master_domain }}"
        return_content: yes
        timeout: 10
      delay: 10
      ignore_errors: "{{ ansible_check_mode }}"
      register: homepage
      retries: 12
      until: homepage.status == 200
      tags: ["teleport_master"]
